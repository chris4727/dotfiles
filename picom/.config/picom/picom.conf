#== PICOM ========================================

# picom -b to daemonize

#-- SHADOWS --------------------------------------

# Default: false
shadow = true;

# Default: 12
shadow-radius = 7;

# The left offset for shadows, in pixels.
# Default: -15
shadow-offset-x = -7;

# The top offset for shadows, in pixels.
# Default: -15
shadow-offset-y = -7;

# shadow-color = "#000000"


#-- FADING ---------------------------------------

# Fade windows in/out when opening/closing and when opacity changes,

# Default: false
fading = true;

# Opacity change between steps while fading in. (0.01 - 1.0, defaults to 0.028)
fade-in-step = 0.03;

# Opacity change between steps while fading out. (0.01 - 1.0, defaults to 0.03)
fade-out-step = 0.03;

# The time between steps in fade step, in milliseconds. (> 0, defaults to 10)
fade-delta = 8


#-- OPACITY --------------------------------------

# Opacity of window titlebars and borders.
# Range: 0.1 - 1.0
# Default: 1.0 (disabled)
frame-opacity = 0.9;

#-- CORNERS --------------------------------------

# Sets the radius of rounded window corners. When > 0, the compositor will
# round the corners of windows. Does not interact well with
# `transparent-clipping`.
#
# Default: 0 (disabled)
corner-radius = 0
rules = (
	{ match = "fullscreen"; corner-radius = 0; },
)

#-- BLUR -----------------------------------------

# BLURRING methods: none, gaussian, box, kernel (define custom kernel), dual_kawase
blur:
{
  method = "dual_kawase";
  size = 10;
  strength = 5;
};

# semi-transparent
blur-background = true

# blur-background-frame = true
# Use fixed blur strength rather than adjusting according to window opacity.
blur-background-fixed = true

# set custom blur kernel (method to kernel), preset examples:
blur-kern = "3x3box";

#-- GENERAL --------------------------------------

# Specify the backend to use: `xrender`, `glx`, or `egl`.
# Default: "xrender"
backend = "glx"

# Use higher precision during rendering, and apply dither when presenting the
# rendered screen. Reduces banding artifacts, but may cause performance
# degradation. Only works with OpenGL.
dithered-present = false;

# Enable/disable VSync.
# Default: false
vsync = true;

# Try to detect windows with rounded corners and don't consider them shaped windows.
# Has nothing to do with `corner-radius`.
# Default: false
detect-rounded-corners = true;

# Detect '_NET_WM_WINDOW_OPACITY' on client windows, useful for window managers
# not passing '_NET_WM_WINDOW_OPACITY' of client windows to frame windows.
# Default: false
detect-client-opacity = true;

# Use 'WM_TRANSIENT_FOR' to group windows, and consider windows
# in the same group focused at the same time.
# Default: false
detect-transient = true;

# Use of damage information for rendering. This cause the only the part of the
# screen that has actually changed to be redrawn, instead of the whole screen
# Default: false
use-damage = true;


#-- WINDDOW RULES --------------------------------

# See WINDOW RULES section in the man page for how these work.
rules = (
	# { match = "name = 'dwm'"; opacity = 1; },
	{ match = "focused"; opacity = 1; },
	{ match = "!focused"; opacity = 0.85; },
	{ match = "TOOLTIP"; fade = true; shadow = true; opacity = 0.5; focus = true; full-shadow = false; },
	{ match = "POPUP_MENU"; opacity = 0.7; },
	{ match = "DROPDOWN_MENU"; opacity = 0.7; },
  { match = "class_g = 'qutebrowser'"; shadow = true; full-shadow = true; },
  )

